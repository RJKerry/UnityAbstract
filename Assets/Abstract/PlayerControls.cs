//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Abstract/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""DefaultPlayer"",
            ""id"": ""ae3cc8ab-50c6-4df8-8877-779c81fcbe86"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""58242f3d-d82c-4408-ab24-e331212f2392"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""907998a7-a030-40b3-8294-19e9aa3d83e7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7cab4b05-d5f5-47ca-b121-51c09bb58dd9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4e0ba1a2-ddcc-4774-b26a-c347f58fff73"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""533b9b6d-309b-413e-a9a4-ce75fe127c56"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3e94943-bf70-4990-9195-fe999b6fc58d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7bbd534-7b78-4a59-9156-c2c16699a360"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MouseLook"",
            ""id"": ""5db5d6f0-548d-494e-838b-fa75c35b166a"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""981ae3ba-db1e-4954-8b92-1d47dfc2ec6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""687d7627-fc71-43b0-9190-b69e824ebf47"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""791f10b1-4599-4ee0-9126-e4a9eb550cfa"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DefaultPlayer
        m_DefaultPlayer = asset.FindActionMap("DefaultPlayer", throwIfNotFound: true);
        m_DefaultPlayer_Walk = m_DefaultPlayer.FindAction("Walk", throwIfNotFound: true);
        // MouseLook
        m_MouseLook = asset.FindActionMap("MouseLook", throwIfNotFound: true);
        m_MouseLook_Look = m_MouseLook.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultPlayer
    private readonly InputActionMap m_DefaultPlayer;
    private IDefaultPlayerActions m_DefaultPlayerActionsCallbackInterface;
    private readonly InputAction m_DefaultPlayer_Walk;
    public struct DefaultPlayerActions
    {
        private @PlayerControls m_Wrapper;
        public DefaultPlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_DefaultPlayer_Walk;
        public InputActionMap Get() { return m_Wrapper.m_DefaultPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultPlayerActions instance)
        {
            if (m_Wrapper.m_DefaultPlayerActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_DefaultPlayerActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_DefaultPlayerActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_DefaultPlayerActionsCallbackInterface.OnWalk;
            }
            m_Wrapper.m_DefaultPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
            }
        }
    }
    public DefaultPlayerActions @DefaultPlayer => new DefaultPlayerActions(this);

    // MouseLook
    private readonly InputActionMap m_MouseLook;
    private IMouseLookActions m_MouseLookActionsCallbackInterface;
    private readonly InputAction m_MouseLook_Look;
    public struct MouseLookActions
    {
        private @PlayerControls m_Wrapper;
        public MouseLookActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_MouseLook_Look;
        public InputActionMap Get() { return m_Wrapper.m_MouseLook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseLookActions set) { return set.Get(); }
        public void SetCallbacks(IMouseLookActions instance)
        {
            if (m_Wrapper.m_MouseLookActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_MouseLookActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MouseLookActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MouseLookActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_MouseLookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public MouseLookActions @MouseLook => new MouseLookActions(this);
    public interface IDefaultPlayerActions
    {
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface IMouseLookActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
}
