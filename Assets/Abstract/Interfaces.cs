using Cinemachine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public interface IInteractable
{
    void OnInteract(PlayerInputManager messageSource);
}

/// <summary>
/// IDanageable -
/// Implement on objects that want to have health, and recieve damage
/// 
/// Ensures implementing classes contain:
/// fields for a Health value,
/// accessubke Const for base health across implementing bodies,
/// A Method allowing for registration of damage
/// </summary>
public interface IDamageable
{
    public float Health { get; set; }
    float GetMaxHealthDefault(float MAX_HEALTH_DEFAULT = 1.0f); //Do not override
    public void OnDamageRecieved(float damage);
}

/// <summary>
/// To Be used in turrets.
/// </summary>
public interface ICanBeDisabled
{
    void OnDisableInteract();
}

/// <summary>
/// For anything that wants to be recognised as an event
/// and activatable
/// </summary>
public interface IEventListener
{
    void OnActivated();
}

/// <summary>
/// For anything that wants to be an event that appears on terminals, and be activated by buttons
/// Contains graphic for buttons that can be loaded by terminals
/// </summary>
public interface ITerminalListener : IEventListener
{
    public int IDGroup { get; set; } //Interface has field IDGroup, implementing classes can have ID field this hooks into
    public Sprite TerminalButtonIcon { get; set; } //This will allow buttons to be generated by terminals that can see compatible listeners
}